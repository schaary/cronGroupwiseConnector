#!/usr/bin/env ruby
# encoding: utf-8

$:.unshift File.expand_path('../../lib',__FILE__)

require 'awesome_print'
require 'colored'
require 'dotenv'; Dotenv.load
require 'mail'
require 'ruby-plsql'
require 'pry'
require 'thor'
require 'time'

require 'idm'
require 'groupwise'

class AddMailAddresses < Thor
  method_option :nolog,
                type: :boolean,
                default: false,
                desc: 'write no log about this run'
  desc 'push','fetch the cursor with new mail addresss from idm'
  def update
    @service = :update

    puts "Beginn: #{Time.now.localtime.strftime('%d.%m.%Y %H:%M Uhr')}"
    @idm = Idm.new

    @accounts = @idm.fetch_update_sets

    groupwise = Groupwise.new
    counter = 0
    @accounts.map do |account|
      groupwise.update(account: account)
      counter += 1
      puts "#{counter}: Account #{account.uid} (#{account.mail}) geschrieben"
    end

    @idm.write_log(service: @service) unless options[:nolog]
    puts "Ende: #{Time.now.localtime.strftime('%d.%m.%Y %H:%M Uhr')}"
  end

private

  def parse_timestamp since: nil
    return @idm.last_run(service: @service) if since.nil?

    unless since.match(/\A[0-9]{2}\.[0-9]{2}\.[0-9]{4}\s[0-9]{2}:[0-9]{2}\z/)
      abort error "Das angegebene Datumsformat kann nicht geparsed werden. " + 
                  "Versuche: '01.03.1972 07:24'"
    end

    begin
      DateTime.strptime(since,'%d.%m.%Y %H:%M').to_time
    rescue => e
    end
  end

  def error msg
    error_prefix = "[" + "error".red + "] "
    error_prefix + msg
  end
end

AddMailAddresses.start
